<alfresco-config>
	<!-- Introduction of new namespaces defined by this model -->
	<namespaces>
		<namespace uri="http://www.shelvestech.com/model/content/1.0" prefix="svt" />
	</namespaces>
	
	<!-- Document Library config section -->
    <config evaluator="string-compare" condition="DocumentLibrary">
    	<types>
			<type name="cm:content">
				<subtype name="svt:hcdoc" />
			</type>
		</types>
    </config>
    
    <!-- Search config section -->
    <config replace="true" evaluator="string-compare" condition="AdvancedSearch">
	    <advanced-search>
	        <!-- Forms for the advanced search type list -->
	        <forms>
	            <form labelId="search.form.label.cm_content" descriptionId="search.form.desc.cm_content">cm:content</form>
	            <form labelId="search.form.label.cm_folder" descriptionId="search.form.desc.cm_folder">cm:folder</form>            
	            <form labelId="type.svt_hcdoc" description="Search for Health Care Documents">svt:hcdoc</form>
	        </forms>
	    </advanced-search>
	</config>

	<!-- Example config to turn off the CSRF filter
	<config evaluator="string-compare" condition="CSRFPolicy" replace="true">
		<filter/>
	</config>
	-->

	<!-- Configuration for Apache reverse proxy on localhost:8080 -->
	<config evaluator="string-compare" condition="CSRFPolicy" replace="true">

		<!-- Will be used and exposed to the client side code in Alfresco.contants.CSRF_POLICY. 
			Use the Alfresco.util.CSRFPolicy.getHeader() or Alfresco.util.CSRFPolicy.getParameter() 
			with Alfresco.util.CSRFPolicy.getToken() to set the token in custom 3rd party 
			code. -->
		<client>
			<cookie>Alfresco-CSRFToken</cookie>
			<header>Alfresco-CSRFToken</header>
			<parameter>Alfresco-CSRFToken</parameter>
		</client>

		<!-- The first rule with a matching request will get its action invoked, 
				the remaining rules will be ignored. -->
		<filter>
	
			<!-- Certain webscripts shall not be allowed to be accessed directly form 
				the browser. Make sure to throw an error if they are used. -->
			<rule>
				<request>
					<path>/proxy/alfresco/remoteadm/.*</path>
				</request>
				<action name="throwError">
					<param name="message">It is not allowed to access this url from your browser</param>
				</action>
			</rule>
	
			<!-- Certain Repo webscripts should be allowed to pass without a token 
				since they have no Share knowledge. TODO: Refactor the publishing code so 
				that form that is posted to this URL is a Share webscript with the right 
				tokens. -->
			<rule>
				<request>
					<method>POST</method>
					<path>/proxy/alfresco/api/publishing/channels/.+</path>
				</request>
				<action name="assertReferer">
					<param name="always">false</param>
					<param name="referer">http://www.shelvestech.in/.*|https://www.shelvestech.in/.*</param>
				</action>
				<action name="assertOrigin">
					<param name="always">false</param>
					<param name="origin">http://www.shelvestech.i|https://www.shelvestech.in</param>
				</action>
			</rule>
	
			<!-- Certain Surf POST requests from the WebScript console must be allowed 
				to pass without a token since the Surf WebScript console code can't be dependent 
				on a Share specific filter. -->
			<rule>
				<request>
					<method>POST</method>
					<path>/page/caches/dependency/clear|/page/index|/page/surfBugStatus|/page/modules/deploy|/page/modules/module|/page/api/javascript/debugger|/page/console</path>
				</request>
				<action name="assertReferer">
					<param name="always">false</param>
					<param name="referer">http://www.shelvestech.in/.*|https://www.shelvestech.in/.*</param>
				</action>
				<action name="assertOrigin">
					<param name="always">false</param>
					<param name="origin">http://www.shelvestech.i|https://www.shelvestech.in</param>
				</action>
			</rule>
	
			<!-- Certain Share POST requests does NOT require a token -->
			<rule>
				<request>
					<method>POST</method>
					<path>/page/dologin(\?.+)?|/page/site/[^/]+/start-workflow|/page/start-workflow|/page/context/[^/]+/start-workflow</path>
				</request>
				<action name="assertReferer">
					<param name="always">false</param>
					<param name="referer">http://www.shelvestech.in/.*|https://www.shelvestech.in/.*</param>
				</action>
				<action name="assertOrigin">
					<param name="always">false</param>
					<param name="origin">http://www.shelvestech.i|https://www.shelvestech.in</param>
				</action>
			</rule>
	
			<!-- Assert logout is done from a valid domain, if so clear the token when 
				logging out -->
			<rule>
				<request>
					<method>POST</method>
					<path>/page/dologout(\?.+)?</path>
				</request>
				<action name="assertReferer">
					<param name="always">false</param>
					<param name="referer">http://www.shelvestech.in/.*|https://www.shelvestech.in/.*</param>
				</action>
				<action name="assertOrigin">
					<param name="always">false</param>
					<param name="origin">http://www.shelvestech.i|https://www.shelvestech.in</param>
				</action>
				<action name="clearToken">
					<param name="session">Alfresco-CSRFToken</param>
					<param name="cookie">Alfresco-CSRFToken</param>
				</action>
			</rule>
	
			<!-- Make sure the first token is generated -->
			<rule>
				<request>
					<session>
						<attribute name="_alf_USER_ID">.+</attribute>
						<attribute name="Alfresco-CSRFToken" />
						<!-- empty attribute element indicates null, meaning the token has not yet been set -->
					</session>
				</request>
				<action name="generateToken">
					<param name="session">Alfresco-CSRFToken</param>
					<param name="cookie">Alfresco-CSRFToken</param>
				</action>
			</rule>
	
			<!-- Refresh token on new "page" visit when a user is logged in -->
			<rule>
				<request>
					<method>GET</method>
					<path>/page/.*</path>
					<session>
						<attribute name="_alf_USER_ID">.+</attribute>
						<attribute name="Alfresco-CSRFToken">.+</attribute>
					</session>
				</request>
				<action name="generateToken">
					<param name="session">Alfresco-CSRFToken</param>
					<param name="cookie">Alfresco-CSRFToken</param>
				</action>
			</rule>
	
			<!-- Verify multipart requests from logged in users contain the token as 
				a parameter and also correct referer & origin header if available -->
			<rule>
				<request>
					<method>POST</method>
					<header name="Content-Type">multipart/.+</header>
					<session>
						<attribute name="_alf_USER_ID">.+</attribute>
					</session>
				</request>
				<action name="assertToken">
					<param name="session">Alfresco-CSRFToken</param>
					<param name="parameter">Alfresco-CSRFToken</param>
				</action>
				<action name="assertReferer">
					<param name="always">false</param>
					<param name="referer">http://www.shelvestech.in/.*|https://www.shelvestech.in/.*</param>
				</action>
				<action name="assertOrigin">
					<param name="always">false</param>
					<param name="origin">http://www.shelvestech.i|https://www.shelvestech.in</param>
				</action>
			</rule>
	
			<!-- Verify that all remaining state changing requests from logged in users' 
				requests contains a token in the header and correct referer & origin headers 
				if available. We "catch" all content types since just setting it to "application/json.*" 
				since a webscript that doesn't require a json request body otherwise would 
				be successfully executed using i.e."text/plain". -->
			<rule>
				<request>
					<method>POST|PUT|DELETE</method>
					<session>
						<attribute name="_alf_USER_ID">.+</attribute>
					</session>
				</request>
				<action name="assertToken">
					<param name="session">Alfresco-CSRFToken</param>
					<param name="header">Alfresco-CSRFToken</param>
				</action>
				<action name="assertReferer">
					<param name="always">false</param>
					<param name="referer">http://www.shelvestech.in/.*|https://www.shelvestech.in/.*</param>
				</action>
				<action name="assertOrigin">
					<param name="always">false</param>
					<param name="origin">http://www.shelvestech.i|https://www.shelvestech.in</param>
				</action>
			</rule>
		</filter>
	</config>

</alfresco-config>